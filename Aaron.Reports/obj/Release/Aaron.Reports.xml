<?xml version="1.0"?>
<doc>
<assembly>
<name>
Aaron.Reports
</name>
</assembly>
<members>
<member name="T:Aaron.Reports.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:Aaron.Reports.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:Aaron.Reports.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:Aaron.Reports.My.Resources.Resources.ChartReport">
<summary>
  Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
              xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
              xmlns:xrd=&quot;clr-namespace:CodeReason.Reports.Document;assembly=CodeReason.Reports&quot;
              xmlns:crcv=&quot;clr-namespace:CodeReason.Reports.Charts.Visifire;assembly=CodeReason.Reports.Charts.Visifire&quot;
              PageHeight=&quot;29.7cm&quot; PageWidth=&quot;21cm&quot; ColumnWidth=&quot;21cm&quot;&gt;
    &lt;xrd:ReportProperties&gt;
        &lt;xrd:ReportProperties.ReportName&gt;Ch [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:Aaron.Reports.My.Resources.Resources.ChartTable">
<summary>
  Looks up a localized string similar to &lt;Paragraph&gt;
    &lt;crcv:ColumnChart TableName=&quot;{0}&quot; TableColumns=&quot;{1},{2}&quot; Width=&quot;{3}cm&quot; Height=&quot;{4}cm&quot; View3D=&quot;{5}&quot; Title=&quot;{6}&quot;&gt;&lt;/crcv:ColumnChart&gt;
&lt;/Paragraph&gt;.
</summary>
</member>
<member name="P:Aaron.Reports.My.Resources.Resources.MyText">
<summary>
  Looks up a localized string similar to &lt;xrd:SectionDataGroup DataGroupName=&quot;Group2&quot;&gt;
    &lt;Paragraph FontSize=&quot;20&quot; FontWeight=&quot;Bold&quot; BorderThickness=&quot;2&quot;&gt;{1}&lt;/Paragraph&gt;
    &lt;Table CellSpacing=&quot;0&quot; BorderBrush=&quot;Black&quot; BorderThickness=&quot;2&quot;&gt;
        &lt;TableRowGroup Style=&quot;{StaticResource headerFooterRowStyle}&quot;&gt;
            &lt;xrd:TableRowForDynamicHeader TableName=&quot;{2}&quot;/&gt;
        &lt;/TableRowGroup&gt;

        &lt;TableRowGroup Style=&quot;{StaticResource dataRowStyle}&quot;&gt;
            &lt;xrd:TableRowForDynamicDataTable TableName=&quot;{0}&quot;/&gt;
        &lt;/TableRowGroup&gt;
 [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:Aaron.Reports.My.Resources.Resources.Template1">
<summary>
  Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
              xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
              xmlns:xrd=&quot;clr-namespace:CodeReason.Reports.Document;assembly=CodeReason.Reports&quot;
              PageHeight=&quot;29.7cm&quot; PageWidth=&quot;21cm&quot; ColumnWidth=&quot;21cm&quot;&gt;

    &lt;FlowDocument.Resources&gt;
        &lt;!-- Style for header/footer rows. --&gt;
        &lt;Style x:Key=&quot;headerFooterRowStyle&quot; TargetType=&quot;{x:Type TableRowGroup}&quot;&gt;
            &lt;Setter Property=&quot; [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="T:Aaron.Reports.DocSuperWalker">
 <summary>
 Dynamic cache class for report paginator
 </summary>
</member>
<member name="P:Aaron.Reports.DocSuperWalker.FlowDocument">
 <summary>
 Gets the associated flow document
 </summary>
</member>
<member name="M:Aaron.Reports.DocSuperWalker.#ctor(System.Windows.Documents.FlowDocument)">
 <summary>
 Constructor
 </summary>
 <param name="flowDocument">flow document</param>
</member>
<member name="M:Aaron.Reports.DocSuperWalker.GetFlowDocumentVisualListByType(System.Type)">
 <summary>
 Gets an ArrayList of all document visual object of a specific type
 </summary>
 <param name="type">type of document visual object</param>
 <returns>empty ArrayList, if type does not exist</returns>
</member>
<member name="T:Aaron.Reports.DocWalker.DocumentVisitedEventHandler">
 <summary>
 THe delegate type of the event that will be raised
 </summary>
</member>
<member name="M:Aaron.Reports.DocWalker.Walk(System.Windows.Documents.FlowDocument,Aaron.Reports.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses whole document
 </summary>
 <param name="fd">FlowDocument</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Reports.DocWalker.Walk``1(System.Windows.Documents.FlowDocument,Aaron.Reports.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses whole document
 </summary>
 <param name="fd">FlowDocument</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Reports.DocWalker.TraverseInlines``1(System.Windows.Documents.InlineCollection,Aaron.Reports.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses an InlineCollection
 </summary>
 <param name="inlines">InlineCollection to be traversed</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Reports.DocWalker.TraverseParagraph``1(System.Windows.Documents.Paragraph,Aaron.Reports.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses only passed paragraph
 </summary>
 <param name="p">paragraph</param>
 <returns>list of inlines</returns>
</member>
<member name="M:Aaron.Reports.DocWalker.TraverseBlockCollection_1``1(System.Collections.Generic.IEnumerable{System.Windows.Documents.Block},Aaron.Reports.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses passed block collection
 </summary>
 <param name="blocks">blocks to be traversed</param>
 <returns>list of inlines</returns>
    
</member>
<member name="M:Aaron.Reports.DocWalker.TraverseBlockCollection``1(System.Collections.Generic.IEnumerable{System.Windows.Documents.Block},Aaron.Reports.DocWalker.DocumentVisitedEventHandler)">
 <summary>
 Traverses passed block collection
 </summary>
 <param name="blocks">blocks to be traversed</param>
 <returns>list of inlines</returns>
    
</member>
<member name="T:Aaron.Reports.SectionReportHeader">
 <summary>
 Section representing the report header
 </summary>
</member>
<member name="P:Aaron.Reports.SectionReportHeader.PageHeaderHeight">
 <summary>
 Gets or sets the page header height in percent
 </summary>
</member>
<member name="T:Aaron.Reports.SectionReportFooter">
 <summary>
 Section representing the report footer
 </summary>
</member>
<member name="P:Aaron.Reports.SectionReportFooter.PageFooterHeight">
 <summary>
 Gets or sets the page footer height in percent
 </summary>
</member>
<member name="T:Aaron.Reports.IChart1">
 <summary>
 Interface for a chart object
 </summary>
</member>
<member name="P:Aaron.Reports.IChart1.TableColumns">
 <summary>
 Gets or sets the table columns which are used to draw the chart
 </summary>
</member>
<member name="P:Aaron.Reports.IChart1.TableName">
 <summary>
 Gets or sets the table name containing the data to be drawn
 </summary>
</member>
<member name="P:Aaron.Reports.IChart1.DataColumns">
 <summary>
 Gets or sets the data columns which are used to draw the chart
 </summary>
</member>
<member name="P:Aaron.Reports.IChart1.DataView">
 <summary>
 Data view to be used to draw the data
 </summary>
</member>
<member name="M:Aaron.Reports.IChart1.UpdateChart">
 <summary>
 Updates the chart to use the chart data
 </summary>
</member>
<member name="T:Aaron.Reports.InlineContextValue">
 <summary>
 Contains a single report context value that is to be displayed on the report
 </summary>
</member>
<member name="P:Aaron.Reports.InlineContextValue.Format">
 <summary>
 Gets or sets the value format
 </summary>
</member>
<member name="P:Aaron.Reports.InlineContextValue.PropertyName">
 <summary>
 Gets or sets the property name
 </summary>
</member>
<member name="P:Aaron.Reports.InlineContextValue.Value">
 <summary>
 Gets or sets the object value
 </summary>
</member>
<member name="M:Aaron.Reports.InlineContextValue.FormatValue(System.Object,System.String)">
 <summary>
 Formats a value for output
 </summary>
 <param name="value">value</param>
 <param name="format">format</param>
 <returns></returns>
</member>
<member name="M:Aaron.Reports.InlineContextValue.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Decimal})">
 <summary>
 Raises the ValueChanged event.
 </summary>
 <param name="args">Arguments associated with the ValueChanged event.</param>
</member>
<member name="T:Aaron.Reports.InlineDocumentValue">
 <summary>
 Contains a single report value that is to be displayed on the report (e.g. report title)
 </summary>
</member>
<member name="P:Aaron.Reports.InlineDocumentValue.Format">
 <summary>
 Gets or sets the value format
 </summary>
</member>
<member name="P:Aaron.Reports.InlineDocumentValue.Value">
 <summary>
 Gets or sets the object value
 </summary>
</member>
<member name="F:Aaron.Reports.InlineDocumentValue.ValueChangedEvent">
 <summary>
 Identifies the ValueChanged routed event.
 </summary>
</member>
<member name="M:Aaron.Reports.InlineDocumentValue.OnValueChanged(System.Windows.RoutedPropertyChangedEventArgs{System.Decimal})">
 <summary>
 Raises the ValueChanged event.
 </summary>
 <param name="args">Arguments associated with the ValueChanged event.</param>
</member>
<member name="M:Aaron.Reports.InlineDocumentValue.FormatValue(System.Object,System.String)">
 <summary>
 Formats a value for output
 </summary>
 <param name="value">value</param>
 <param name="format">format</param>
 <returns></returns>
</member>
<member name="P:Aaron.Reports.InlineDocumentValue.PropertyName">
 <summary>Gets or sets the property name</summary>
</member>
<member name="T:Aaron.Reports.ReportContextValues">
 <summary>
 
 </summary>
 <remarks></remarks>
 <features></features>
 <stepthrough></stepthrough>
</member>
<member name="T:Aaron.Reports.ReportContextValues.Types">
 <summary>
 Enumeration of all available context value types
 </summary>
</member>
<member name="F:Aaron.Reports.ReportContextValues.Types.PageNumber">
 <summary>
 Current page number
 </summary>
</member>
<member name="F:Aaron.Reports.ReportContextValues.Types.PageCount">
 <summary>
 Total page count
 </summary>
</member>
<member name="F:Aaron.Reports.ReportContextValues.Types.ReportName">
 <summary>
 Report name
 </summary>
</member>
<member name="F:Aaron.Reports.ReportContextValues.Types.ReportTitle">
 <summary>
 Report title
 </summary>
</member>
<member name="F:Aaron.Reports.ReportContextValues.Types.ReportDate">
 <summary>
 The Default Date associated with the Report
 </summary>
</member>
<member name="M:Aaron.Reports.ReportContextValues.#cctor">
 <summary>
 Static constructor
 </summary>
</member>
<member name="M:Aaron.Reports.ReportContextValues.GetReportContextValueTypeByName(System.String)">
 <summary>
 Gets a report context value type by name
 </summary>
 <param name="name">name of report context value</param>
 <returns>null, if it does not exist</returns>
</member>
<member name="T:Aaron.Reports.XamlHelper">
 <summary>
 Helper class for XAML
 </summary>
</member>
<member name="M:Aaron.Reports.XamlHelper.LoadXamlFromString(System.String)">
 <summary>
 Loads a XAML object from string
 </summary>
 <param name="s">string containing the XAML object</param>
 <returns>XAML object or null, if string was empty</returns>
</member>
<member name="M:Aaron.Reports.XamlHelper.CloneTableRow(System.Windows.Documents.TableRow)">
 <summary>
 Clones a table row
 </summary>
 <param name="orig">original table row</param>
 <returns>cloned table row</returns>
</member>
<member name="M:Aaron.Reports.XamlHelper.CloneBlock(System.Windows.Documents.Block)">
 <summary>
 Clones a complete block
 </summary>
 <param name="orig">orininal block</param>
 <returns>cloned block</returns>
</member>
<member name="M:Aaron.Reports.XamlHelper.CloneUIElement(System.Windows.UIElement)">
 <summary>
 Clones a complete UIElement
 </summary>
 <param name="orig">original UIElement</param>
 <returns>cloned UIElement</returns>
</member>
<member name="M:Aaron.Reports.XamlHelper.SaveImageBmp(System.Windows.Media.Visual,System.IO.Stream,System.Int32,System.Int32,System.Double,System.Double)">
 <summary>
 Saves a visual to bitmap into stream
 </summary>
 <param name="visual">visual</param>
 <param name="stream">stream</param>
 <param name="width">width</param>
 <param name="height">height</param>
 <param name="dpiX">X DPI resolution</param>
 <param name="dpiY">Y DPI resolution</param>
</member>
<member name="M:Aaron.Reports.XamlHelper.SaveImagePng(System.Windows.Media.Visual,System.IO.Stream,System.Int32,System.Int32,System.Double,System.Double)">
 <summary>
 Saves a visual to PNG into stream
 </summary>
 <param name="visual">visual</param>
 <param name="stream">stream</param>
 <param name="width">width</param>
 <param name="height">height</param>
 <param name="dpiX">X DPI resolution</param>
 <param name="dpiY">Y DPI resolution</param>
</member>
<member name="T:Aaron.Reports.Extensions">
 <summary>
 
 </summary>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.Extensions.AddRange(System.Windows.Documents.InlineCollection@,System.String[])">
 <summary>
 Adds A Range of Strings to A <see cref="T:System.Windows.Documents.InlineCollection">InlineCollection</see> Converting Each NewLine into A {LineBreak/} and 
 Adding A {LineBreak/} After each Section
 </summary>
 <param name="InlineCollection">The InlineCollection you want to Add to</param>
 <param name="Sections">The Sections you want to Add to the InlineCollection</param>
 <remarks></remarks>
 <stepthrough></stepthrough>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Aaron.Reports.Extensions.AddRow(System.Windows.Documents.Table@,System.Int32,System.Windows.TextAlignment,System.String[])">
 <summary>
 Adds A Row into the First RowGroup With Cells Emulating <paramref name="Cells"/>
 </summary>
 <param name="Table">The Table you want to Use</param>
 <param name="RowGroupIndex">The Index of the <see cref="T:System.Windows.Documents.TableRowGroup">TableRowGroup</see> You want to add the Row to</param>
 <param name="Default_Alignment"></param>
 
 <param name="Cells"></param>
 <remarks></remarks>
 <stepthrough>The Cells you want to Add</stepthrough>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Aaron.Reports.Extensions.AddRow(System.Windows.Documents.Table@,System.Int32,System.Int32,System.Windows.TextAlignment,System.String[])">
 <summary>
 Adds A Row into the First RowGroup With Cells Emulating <paramref name="Cells"/>
 </summary>
 <param name="Table">The Table you want to Use</param>
 <param name="RowGroupIndex">The Index of the <see cref="T:System.Windows.Documents.TableRowGroup">TableRowGroup</see> You want to add the Row to</param>
 <param name="Default_Alignment"></param>
 
 <param name="Cells"></param>
 <remarks></remarks>
 <stepthrough>The Cells you want to Add</stepthrough>
 <filterpriority>2</filterpriority>
</member>
<member name="M:Aaron.Reports.Extensions.Standardize_CellBorderThickness(System.Windows.Documents.TableRowGroup,System.Single)">
 <summary>
 Standardizes the Actual Thickness of Cell Borders when the Cell Padding is 0
 </summary>
 <param name="RowGroup"></param>
 <param name="Thickness"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.Extensions.ToXML(System.Windows.DependencyObject)">
 <summary>
 Converts A <see cref="T:System.Windows.DependencyObject">DependencyObject</see> into an XElement
 </summary>
 <param name="DependencyObject"></param>
 <returns></returns>
 <remarks></remarks>
 <stepthrough></stepthrough>
 <filterpriority>2</filterpriority>
</member>
<member name="T:Aaron.Reports.Sections.Base">
 <summary>
 The Base Section that all Sections Derive From
 </summary>
 <remarks></remarks>
 <features></features>
 <stepthrough>Enabled</stepthrough>
</member>
<member name="M:Aaron.Reports.Sections.Base.Content">
 <summary>
 Gets the specialized content for this specific section type
 </summary>
 <returns></returns>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="P:Aaron.Reports.Sections.Base.Padding">
 <summary>Update this so it Uses 4 Singles not 1 String</summary>
</member>
<member name="M:Aaron.Reports.Sections.Base.ToXML">
 <summary>
 Converts the Class into an <see cref="T:System.Xml.Linq.XElement">XElement</see>.
 General Translation: XElement.Name To Me.Name; XElement.Attributes To Me.Properties(As Value); XElement.Elements To Me.Properties(As Collection)
 </summary>
 <returns>
 </returns>
 <stepthrough>Enabled</stepthrough>
 <History>
 Aaron: 6/8/2013 Removed xmlns:xrd="clr-namespace:Aaron.Xaml;assembly=Aaron.Xaml" and xrd:
 </History>
</member>
<member name="P:Aaron.Reports.Sections.Basic.Custom_XAML">
 <summary>Represents the Custom Content for this Section. By Default this is not used</summary> 
</member>
<member name="P:Aaron.Reports.Sections.List.List">
 <summary>A Bulleted List where the Text of Each Item is the ListItem's Tag</summary>
</member>
<member name="M:Aaron.Reports.Sections.List.#ctor(System.String,System.String[])">
 <summary>

 </summary>
 <param name="Title">The Title of the List. If Empty then Not Used</param>
 <param name="ListItems"></param>
 <remarks></remarks>
 <stepthrough>Enabled</stepthrough>
</member>
<member name="M:Aaron.Reports.Sections.List.#ctor(System.String,System.Windows.Documents.ListItem[])">
 <summary>

 </summary>
 <param name="Title">The Title of the List. If Empty then Not Used</param>
 <param name="ListItems"></param>
 <remarks></remarks>
 <stepthrough>Enabled</stepthrough>
</member>
<member name="P:Aaron.Reports.Sections.Pictures.Pictures">
 <summary>
 The Pictures that will be used ordered by there place in this list. 
 Example: <example>[Image Height="100" Width="100" Source="C:\Test\Untitled.jpg"/]</example>
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="T:Aaron.Reports.Sections.Table">
 <summary>

 </summary>
 <remarks></remarks>
 <features></features>
 <stepthrough></stepthrough>
</member>
<member name="P:Aaron.Reports.Sections.Table.Table">
 <summary>The Column Header Row's values are Created from each TableColumn's Tag</summary>
</member>
<member name="M:Aaron.Reports.Sections.Table.#ctor(System.String,System.String,System.Double)">
 <summary>

 </summary>
 <param name="Title">The Title of the Section</param>
 <param name="Details">The Optional Details of the Section</param>
 <remarks></remarks>
 <stepthrough>Enabled</stepthrough>
</member>
<member name="M:Aaron.Reports.Sections.Table.#ctor(System.Windows.Documents.TableColumn[])">
 <summary>

 </summary>
 <param name="Columns">The Column Header Row's values are Created from each TableColumn's Tag</param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.Sections.Table.#ctor(System.String,System.Windows.TextAlignment,System.String,System.String,System.Windows.Documents.TableColumn[])">
 <summary>

 </summary>
 <param name="Columns">The Column Header Row's values are Created from each TableColumn's Tag</param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="F:Aaron.Reports.ReportPaginator._paginator">
 <summary>
 Reference to a original flowdoc paginator
 </summary>
</member>
<member name="P:Aaron.Reports.ReportPaginator.IsPageCountValid">
 <summary>
 Determines if the current page count is valid
 </summary>
</member>
<member name="P:Aaron.Reports.ReportPaginator.PageCount">
 <summary>
 Gets the total page count
 </summary>
</member>
<member name="P:Aaron.Reports.ReportPaginator.PageSize">
 <summary>
 Gets or sets the page size
 </summary>
</member>
<member name="P:Aaron.Reports.ReportPaginator.Source">
 <summary>
 Gets the paginator source
 </summary>
</member>
<member name="M:Aaron.Reports.ReportPaginator.#ctor(Aaron.Reports.Basic)">
 <summary>
 Constructor
 </summary>
 <param name="report">report document</param>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page height</exception>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page width</exception>
 <exception cref="T:System.ArgumentException">Flow document can have only one report header section</exception>
 <exception cref="T:System.ArgumentException">Flow document can have only one report footer section</exception>
</member>
<member name="M:Aaron.Reports.ReportPaginator.FillData">
 <summary>
 Fills document with data
 </summary>
</member>
<member name="M:Aaron.Reports.ReportPaginator.FillContextValues(System.Collections.ArrayList,System.Int32)">
 <summary>
 Fills in Context Vales
 </summary>
 <param name="list"></param>
 <param name="pageNumber"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.ReportPaginator.GetPage(System.Int32)">
 <summary>
 This is most important method, modifies the original 
 </summary>
 <param name="pageNumber">page number</param>
 <returns></returns>
</member>
<member name="T:Aaron.Reports.Basic">
 <summary>
 Contains a complete report template without data
 </summary>
</member>
<member name="P:Aaron.Reports.Basic.ReportDate">
 <summary>
 The Default Date associated with the Report
 </summary>
 <value></value>
 <remarks>
 <see cref="F:Aaron.Reports.ReportContextValues.Types.ReportDate"/>
 </remarks>
</member>
<member name="P:Aaron.Reports.Basic.DocumentValues">
 <summary>
 Gets a list of document values
 </summary>
</member>
<member name="P:Aaron.Reports.Basic.ShowUnknownValues">
 <summary>
 Shows all unknown values on the page
 </summary>
</member>
<member name="P:Aaron.Reports.Basic.PageHeight">
 <summary>
 Gets the original page height of the FlowDocument
 </summary>
</member>
<member name="P:Aaron.Reports.Basic.PageWidth">
 <summary>
 Gets the original page width of the FlowDocument
 </summary>
</member>
<member name="P:Aaron.Reports.Basic.ReportName">
 <summary>
 Gets or sets the optional report name
 </summary>
</member>
<member name="P:Aaron.Reports.Basic.ReportTitle">
 <summary>
 Gets or sets the optional report title.
 </summary>
 <remarks>
 XAML to use: {xrd:InlineContextValue Format="D" PropertyName="ReportTitle" />}
 </remarks>
</member>
<member name="P:Aaron.Reports.Basic.Sections">
 <summary>The Sections that make up the Report</summary> 
</member>
<member name="P:Aaron.Reports.Basic.Title">
 <summary>The Title of the Report</summary> 
</member>
<member name="P:Aaron.Reports.Basic.Details">
 <summary>An Optional Paragraph Detailing the Report</summary> 
</member>
<member name="P:Aaron.Reports.Basic.Bottom_Left">
 <summary>The Text for the Bottom Left of the Page</summary> 
</member>
<member name="P:Aaron.Reports.Basic.Bottom_Right">
 <summary>The Text for the Bottom Right of the Page</summary> 
</member>
<member name="M:Aaron.Reports.Basic.#ctor(System.String,System.String,System.Windows.TextAlignment)">
 <summary>
 
 </summary>  
 <param name="Title">The Title of the Report</param>
 <param name="Details">The Details of the Report</param>
 <param name="Paragraph_Text_Alignment"></param>
 <remarks></remarks>
 <stepthrough>Enabled</stepthrough>
</member>
<member name="M:Aaron.Reports.Basic.#ctor(System.String,System.String,Aaron.Reports.Sections.Base[])">
 <summary>
 
 </summary>
 <param name="Title">The Title of the Report</param>
 <param name="Details">The Details of the Report</param>
 <param name="Sections"></param>
 <remarks></remarks>
 <stepthrough>Enabled</stepthrough>
</member>
<member name="M:Aaron.Reports.Basic.AsPDF(System.Windows.Xps.Packaging.XpsDocument)">
 <summary>
 Creates a PDF and saves it to a temporary file and returns that files name.
 </summary>
 <param name="Document"></param>
 <returns></returns>
</member>
<member name="M:Aaron.Reports.Basic.AddPage(System.Boolean,System.IO.MemoryStream,iTextSharp.text.Document@,iTextSharp.text.pdf.PdfWriter)">
 <summary>
 
 </summary>
 <param name="Resize"></param>
 <param name="Image"></param>
 <param name="oPdfDoc"></param>
 <param name="oPdfWriter"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.Basic.CreateXpsDocument">
 <summary>
 Helper method to create page header or footer from flow document template
 </summary>
 <returns></returns>
</member>
<member name="M:Aaron.Reports.Basic.CreateFlowDocument">
 <summary>
 Creates a flow document of the report data
 </summary>
 <returns></returns>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page height</exception>
 <exception cref="T:System.ArgumentException">Flow document must have a specified page width</exception>
 <exception cref="T:System.ArgumentException">"Flow document must have only one ReportProperties section, but it has {0}"</exception>
</member>
<member name="M:Aaron.Reports.Basic.AsPDF">
 <summary>
 Creates a PDF and saves it to a temporary file and returns that files name.
 </summary>
 <returns>The Full Name of the PDF File</returns>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.Basic.Print(System.Boolean)">
 <summary>
 Prints this document automatically or with a <see cref="T:System.Windows.Controls.PrintDialog">PrintDialog</see>
 </summary>
 <param name="Hidden">If <c>True</c> Print the document immediately <c>Else</c> show the user a <see cref="T:System.Windows.Controls.PrintDialog">PrintDialog</see> for printing purposes</param>
</member>
<member name="M:Aaron.Reports.Basic.GetString">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks>
 Aaron Campf: 6/7/2013 Added [Formatted_Sections]
 </remarks>
 <stepthrough>Disabled</stepthrough>
</member>
<member name="M:Aaron.Reports.Basic.Print(System.Boolean,System.Windows.Xps.Packaging.XpsDocument)">
 <summary>
 Prints the <paramref name="Document"/> automatically or with a <see cref="T:System.Windows.Controls.PrintDialog">PrintDialog</see>
 </summary>
 <param name="Hidden">If <c>True</c> Print the document immediately <c>Else</c> show the user a <see cref="T:System.Windows.Controls.PrintDialog">PrintDialog</see> for printing purposes</param>
 <param name="Document">The document you want to print</param>
</member>
<member name="T:Aaron.Reports.XpsImage">
 <summary>
 Provides methods for converting XPS document in to various image format
 </summary>
</member>
<member name="P:Aaron.Reports.XpsImage.XpsFileName">
 <summary>
 Sets the XPS file to be read
 </summary>
</member>
<member name="P:Aaron.Reports.XpsImage.OutputFormat">
 <summary>
 Gets or Sets the image format for thumbnail
 </summary>
</member>
<member name="P:Aaron.Reports.XpsImage.OutputStream">
 <summary>
 Returns the Memory stream of generated thumbnail
 </summary>
</member>
<member name="M:Aaron.Reports.XpsImage.#ctor(System.String,Aaron.Reports.XpsImage.Output)">
 <summary>
 
 </summary>
 <param name="XpsFileName"></param>
 <param name="OutputFormat"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.XpsImage.GenerateThumbnail">
 <summary>
 Generate the thumbnail of given document and populates the ThumbnailStream property
 </summary>
</member>
<member name="M:Aaron.Reports.XpsImage.Save">
 <summary>
 
 </summary>
 <returns></returns>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="M:Aaron.Reports.XpsImage.Save(Aaron.Reports.Basic)">
 <summary>
 Feature Not Constructed Yet
 </summary>
 <param name="Report"></param>
 <remarks></remarks>
 <stepthrough></stepthrough>
</member>
<member name="T:Aaron.Reports.XpsImage.Output">
 <summary>
 Imageformat
 </summary>
</member>
</members>
</doc>
